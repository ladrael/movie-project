<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
  <mapper namespace="com.itwillbs.movie.mapper.MypageMapper">
  
  
  <!-- 회원 정보 조회 -->
	<select id="selectMemberInfo" resultType="com.itwillbs.movie.vo.MemberVO">
		SELECT member_id
			, member_name
			, member_pw
			, SUBSTRING_INDEX(member_address, '/', 1) AS member_address1
			, SUBSTRING_INDEX(member_address, '/', -1) AS member_address2
			, member_address
			, member_bday
			, member_email
			, member_tel
			, member_point
			, member_prefer_branch
			, member_prefer_genre
			, member_date
			    FROM member
		WHERE member_id  = #{id}
	</select>
	
	<select id="selectMemberId" resultType="hashmap">
		SELECT * 
			FROM member
			WHERE member_id = #{id}
	</select>
	
	<!-- 비밀번호 조회 -->
	<select id="selectPasswd" resultType="String">
		SELECT member_pw FROM member
		WHERE member_id = #{member_id}
	</select>
	
	<!-- 회원정보수정 -->
	<update id="updateMemberInfo" >
	 UPDATE member
	 	SET 
	 	member_email = #{member_email}
	 	<if test = "member_pw2 neq ''">
	 	,member_pw = #{member_pw2}
	 	</if>
	 	,member_address = #{member_address}
	 	,member_name = #{member_name}
	 	,member_bday = #{member_bday}
	 	,member_tel = #{member_tel}
	 	,member_prefer_branch = #{member_prefer_branch}
	 	,member_prefer_genre = #{member_prefer_genre}
		WHERE member_id = #{member_id}
	
	</update>
  
  	<delete id = "deleteMember" >
  		DELETE 
  			FROM member
  			WHERE member_id = #{member_id}
  	</delete>
  	
  	<select id = "qnaList" resultType = "hashmap" >
  		SELECT 
  			cinema_name
  			,one_question_type
  			,one_subject
  			,one_write_date
  			,one_rep_board
  		FROM one_board 
  		WHERE member_id = #{id}
  		ORDER BY one_write_date DESC
  		
  	</select>
  	
  	<insert id= "insertReview" >

		INSERT INTO review VALUES
		(
 		(SELECT *
  			  FROM (SELECT IFNULL(MAX(rev_code),0) FROM review) A)+1
		,(select res_movie_code
		from reservation where res_id = #{id}
		order by res_code desc limit 1)
		,(select res_title
		from reservation where res_id = #{id} 
		order by res_code desc limit 1)
	  	,#{id}
		,#{rev_rating}
		,#{rev_content}
		,now()
		)

	
  	</insert>

  	<select id = "revList" resultType = "hashmap" >
  		SELECT 
  			 rev_movie_title
  			,rev_content
  			,rev_rating
  			,rev_date
  		FROM review
  		WHERE rev_id = #{id}
  	</select>
  	
  	<select id = "movieList" resultType= "hashmap">
  		SELECT info_movie_title
		FROM movieinfo
		WHERE info_genre 
		LIKE	(concat ("%",
					(SELECT member_prefer_genre 
                        FROM member 
                        WHERE member_id = #{id}),"%"))
  	</select>
  	
  	<insert id= "insertPoint" >
		INSERT 
  			INTO point
  			VALUES (
  			(SELECT *
  			  FROM (SELECT IFNULL(MAX(point_code),0) FROM point) A)+1
  			, #{id}
  			,'리뷰작성 이벤트'
			,'500'
			,now()
  			);
  	</insert>
  	
  	<select id = "pointList" resultType = "hashmap" >
  		SELECT 
 			 point_date
 			,point_content
 			,point_amount
 			,ROUND(sum(point_amount) OVER (ORDER BY point_code),0) AS point_sum
  		FROM point
  		WHERE point_id = #{id}
  		ORDER BY point_code DESC
  	</select>
  	
  	<select id = "payList" resultType = "hashmap" >
	  	 SELECT 
	  	 	p.pay_date
	  	 	,i.item_type
	  	 	,i.item_name
	  	 	,p.pay_price
	  	 FROM pay p JOIN item i
	  	 ON p.item_code = i.item_code
	  	WHERE p.member_id = #{id}
	  	ORDER BY p.pay_date DESC
  	</select>
  	
  	<select id = "cinemaList" resultType="hashmap">
  		SELECT cinema_name
   	  	  , CASE WHEN A.member_prefer_branch IS NOT NULL THEN 'selected' END AS selected
   		 FROM cinema c
   		LEFT JOIN (SELECT member_prefer_branch
			FROM member
			WHERE member_id  =  #{id}) A
	 		ON c.cinema_name = A.member_prefer_branch
  	</select>
  	
  	
<!--   	update [테이블명1] X  -->
<!-- inner join [테이블명2] Y on X.[조인된컬럼] = Y.[조인된컬럼] -->
<!-- set X.[컬럼A] = 변경할값 -->
<!-- ( WHERE 절 ) -->
  	
  	<update id="updatePoint" >
	  UPDATE member
	  SET member_point = (SELECT sum(point_amount) FROM point 
	 	 WHERE point_id = #{id})
	 	WHERE member_id = #{id}
  	</update>
  	
  	<select id = "resList" resultType = "hashmap">
  		SELECT 
	 	r.res_paydate
	 	,r.res_title
	 	,r.res_cinema
	 	,r.res_seat_num
	 	,sn.screen_name
	 	,sc.sch_movie_date
	 	,concat(sc.sch_start_time,' ~ ',sc.sch_last_time) AS movietime
	 	,r.res_pay
	 	FROM 
	 	reservation r, schedule sc, screen sn 
	 	WHERE r.res_sch_code = sc.sch_code 
	 	AND r.res_screen_code = sn.screen_code
	 	AND r.res_id = #{id}
  	</select>
  	
	<select id="checkReview" resultType="int" >
	  SELECT COUNT(*) as A
	  FROM review 
	  WHERE rev_id = #{id} AND rev_movie_code = (select res_movie_code
			from reservation where res_id = #{id}
			order by res_code desc limit 1)
	</select>
	
	<select id="likeList" resultType="hashmap">
	 	SELECT distinct(m.info_movie_title) as movie_title
	 	FROM movieinfo m JOIN like_movie l on m.info_movie_code = l.like_movie_code
	 	where l.like_id = #{id} limit 5;
	</select>
  	
</mapper>
